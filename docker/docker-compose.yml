version: '3.8'

services:
  postgresql:
    image: postgres:15
    container_name: odoo_postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: odoo
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgresql_data:/var/lib/postgresql/data/pgdata
      - ./backup:/backup
      - ./postgresql/init:/docker-entrypoint-initdb.d
    networks:
      - odoo_network
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U odoo"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: postgres -c 'max_connections=200' -c 'shared_buffers=256MB' -c 'effective_cache_size=1GB'

  odoo:
    image: odoo:17
    container_name: odoo_app
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      HOST: postgresql
      USER: odoo
      PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./addons:/mnt/extra-addons
      - ./config:/etc/odoo
      - odoo_data:/var/lib/odoo
      - ./logs:/var/log/odoo
    ports:
      - "127.0.0.1:8069:8069"
      - "127.0.0.1:8072:8072"
    networks:
      - odoo_network
    command: odoo --config=/etc/odoo/odoo.conf
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8069/web/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: odoo_nginx
    restart: unless-stopped
    depends_on:
      odoo:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
    networks:
      - odoo_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/web/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  odoo_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgresql_data:
    driver: local
  odoo_data:
    driver: local

# NOTA SOBRE EFS (Elastic File System):
# Si configuraste EFS en terraform.tfvars, los directorios importantes ya están
# montados automáticamente en /opt/odoo/data (o tu efs_mount_point personalizado).
# 
# Para aprovechar EFS para persistencia adicional, puedes modificar los volúmenes:
# 
# postgresql_data:
#   driver: local
#   driver_opts:
#     type: none
#     o: bind
#     device: /opt/odoo/data/postgresql
# 
# odoo_data:
#   driver: local  
#   driver_opts:
#     type: none
#     o: bind
#     device: /opt/odoo/data/odoo
#
# Esto haría que los datos de PostgreSQL y Odoo se almacenen en EFS,
# sobreviviendo a la recreación de instancias.
